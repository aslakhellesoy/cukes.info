---
layout: default
title: Step Definitions
---
h1. Step Definitions

Step definitions are defined in ruby files under <code>features/step_definitions/*_steps.rb</code>. Here is a simple example:

{% highlight ruby %}
Given /^I have (\d+) cucumbers in my belly$/ do |cukes|
  # Some Ruby code here
end
{% endhighlight %}
{% highlight java %}
@Given("^I have (\\d+) cucumbers in my belly$")
public void cukesInTheBelly(int cukes)
    // Some Java code here
end
{% endhighlight %}
{% highlight csharp %}
[Given(@"^I have (\d+) cucumbers in my belly$")]
public void CukesInTheBelly()
{
    // Some C# code here
}
{% endhighlight %}
{% highlight scala %}
Given("""^I have (\d+) cucumbers in my belly$""") { cukes: Int =>
  // Some Scala code here
}
{% endhighlight %}
{% highlight groovy %}
Given(~"^I have (\\d+) cucumbers in my belly$") { int cukes ->
  // Some Groovy code here
}
{% endhighlight %}
{% highlight clojure %}
(Given #"^I have (\d+) cucumbers in my belly$"
  ; Some Clojure code here
  )
{% endhighlight %}
{% highlight javascript %}
Given(/^I have (\d+) cucumbers in my belly$/, function(cukes) {
  // Some Javascript code here
});
{% endhighlight %}
{% highlight ioke %}
Given(#/^I have ({number}\d+) cukes in my belly$/,
  ; Some Ioke code here
  )
{% endhighlight %}

Also note that you can define steps with Internationalization.

A step definition is analogous to a _method definition or function definition_ in a conventional programming language. Instead of having a literal name they are named by a Regexp. Step definitions can take 0 or more arguments, identified by groups in the Regexp (and an equal number of arguments to the body). 

Then there are Steps. Steps are declared in your <code>features/*.feature</code> files. Here is an example:

{% highlight gherkin %}
Given I have 93 cucumbers in my belly
{% endhighlight %}

A step is analogous to a method or function _invocation_. In this example, you're "calling" the step definition above with one argument - the string "93". Cucumber matches the Step against the Step Definition's Regexp and takes all of the captures from that match and passes them to the body.

Step Definitions start with an "adjective":http://www.merriam-webster.com/dictionary/given or an "adverb":http://www.merriam-webster.com/dictionary/when, and can be expressed in any of Cucumber's supported [[Spoken languages]]. All Step definitions are loaded (and defined) before Cucumber starts to execute the plain text.

When Cucumber executes the plain text, it will for each step look for a registered Step Definition with a matching Regexp. If it finds one it will execute the associated body, passing all groups from the Regexp match as arguments to the body.

The adjective/adverb has *no* significance when Cucumber is registering or looking for Step Definitions.

Also check out [[Multiline Step Arguments]] for more info on how to pass entire tables or bigger strings to your step definitions.

h2. Successful steps

When Cucumber finds a matching Step Definition it will execute it. If the block in the step definition doesn't raise an Exception, the step is marked as successful (green). What you return from a Step Definition has no significance what so ever.

h2. Undefined steps

When Cucumber can't find a matching Step Definition the step gets marked as yellow, and all subsequent steps in the scenario are skipped. If you use <code>--strict</code> this will cause Cucumber to exit with <code>1</code>.

h2. Pending steps

When a Step Definition's body invokes the <code>#pending</code> method, the step is marked as yellow (as with undefined ones), reminding you that you have work to do. If you use <code>--strict</code> this will cause Cucumber to exit with <code>1</code>.

h2. Failed steps

When a Step Definition's body is executed and raises an error, the step is marked as red. What you return from a Step Definition has no significance what so ever. Returning nil or false will *not* cause a step definition to fail.

h2. Skipped steps

Steps that follow undefined, pending or failed steps are never executed (even if there is a matching Step Definition), and are marked cyan.

h2. Ambiguous steps

Consider these step definitions:

{% highlight ruby %}
Given /Three (.*) mice/ do |disability|
end

Given /Three blind (.*)/ do |animal|
end
{% endhighlight %}

And a plain text step:

{% highlight gherkin %}
Given Three blind mice
{% endhighlight %}

Cucumber can't make a decision about what Step Definition to execute, and will raise a <code>Cucumber::Ambiguous</code> error telling you to fix the ambiguity.

h3. Guess mode

Imagine you have these step definitions:

{% highlight ruby %}
Given /we had (.*)/ do |what|
end

# A really versatile step definition!
Given /we had (.*) on the (.*)/ do |what, where|
end
{% endhighlight %}

And a plain text step:

{% highlight gherkin %}
Given we had drinks on the roof
{% endhighlight %}


The plain text step will match the Regexp of both step definitions and raise <code>Cucumber::Ambiguous</code>. However,
if you run Cucumber with <code>--guess</code>, it will guess that you were aiming for the step definition with 2 match groups.

There is ranking logic that gets invoked when the option is turned on:

# The longest Regexp with 0 capture groups always wins.
# The Regexp with the most capture groups wins (when there are none with 0 groups)
# If there are 2+ Regexen with the same number of capture groups, the one with the shortest overall captured string length wins
# If there are still 2+ options then an Ambiguous error is raised

So if you try <code>--guess</code> with the mice above, Cucumber will pick <code>/Three blind (.*)/</code>, because "mice" is shorter than "blind".

Consider guess mode a workaround. We still recommend you try to have unambiguous regular expressions. When you have a lot of step definitions you quickly lose track of the situations where cucumber will apply guessing logic, and that can lead to some surprises.

h2. Redundant Step Definitions

In Cucumber you're not allowed to use a regexp more than once in a Step Definition (even across files, even with different code inside the body), so the following would cause a <code>Cucumber::Redundant</code> error:

{% highlight ruby %}
Given /Three (.*) mice/ do |disability|
  # some code
end

Given /Three (.*) mice/ do |disability|
  # some other code
end
{% endhighlight %}
